{"version":3,"sources":["hooks/user-input.js","components/UI/ButtonLoading/ButtonLoading.jsx","schemas/password.chema.js","schemas/user.chema.js","schemas/code.chema.js","../node_modules/@material-ui/icons/esm/Visibility.js","../node_modules/@material-ui/icons/esm/VisibilityOff.js","pages/Register/RegisterStyle.jsx","pages/Register/Register.jsx"],"names":["Joi","require","useInput","schemaJson","initialState","useState","enteredInput","setEnteredInput","isTouched","setIsTouched","inputIsValid","errorMsg","schema","object","validate","value","error","toString","hasError","inputChangeHandler","e","target","inputBlurHandler","inputReset","useEffect","useStyles","makeStyles","theme","root","display","background","cursort","buttonLoading","opacity","minHeight","ButtonLoading","children","size","onClick","isLoading","props","classes","className","fullWidth","variant","color","startIcon","style","passwordschema","string","min","required","messages","confirmpasswordSchema","usernameSchema","max","emailSchema","email","tlds","allow","verifyCodeSchema","createSvgIcon","React","d","backgroundAttachment","paddingTop","paddingBottom","position","zIndex","content","left","top","width","height","alpha","form","maxWidth","margin","padding","spacing","borderRadius","breakpoints","down","title","marginBottom","textAlign","formControl","textField","shape","inputLabel","fontSize","textHelper","marginTop","palette","primary","main","textDecoration","marginRight","errorMessage","fontWeight","datePicker","resError","Register","showPassword","setShowPassword","showRetypePassword","setShowRetypePassword","useSelector","state","auth","isAuthenticated","Date","birthDate","setBirthDate","birthError","setBirthError","isNotMatch","setIsNotMatch","setError","history","useHistory","location","useLocation","dispatch","useDispatch","username","usernameBlurHandler","usernameChangeHandler","usernameReset","usernameIsvalid","usernameHasError","usernameErrorMessage","emailBlurHandler","emailChangeHandler","emailReset","emailIsvalid","emailHasError","emailErrorMessage","password","passwordBlurHandler","passwordChangeHandler","passwordReset","passwordIsvalid","passwordHasError","passwordErrorMessage","confirmpassword","confirmpasswordBlurHandler","confirmpasswordChangeHandler","confirmpasswordReset","confirmpasswordIsvalid","confirmpasswordHasError","confirmpasswordErrorMessage","formIsValid","formSubmitHandler","a","preventDefault","register","birthdate","moment","format","unwrap","push","to","from","onSubmit","Typography","FormControl","InputLabel","htmlFor","FilledInput","onBlur","onChange","id","type","FormHelperText","utils","MomentUtils","label","maxDate","date","helperText","autoOk","inputVariant","KeyboardButtonProps","inputField","endAdornment","InputAdornment","IconButton","edge","prevState","onMouseDown","event","Visibility","VisibilityOff","disabled","Box","justifyContent"],"mappings":"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","file":"static/js/12.b8d3b501.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\r\nconst Joi = require('joi');\r\n\r\nexport const useInput = (schemaJson = null, initialState = '') => {\r\n  const [enteredInput, setEnteredInput] = useState(initialState);\r\n  const [isTouched, setIsTouched] = useState(false);\r\n  let inputIsValid = true;\r\n\r\n  let errorMsg = null;\r\n  if (schemaJson) {\r\n    const schema = Joi.object(schemaJson);\r\n    const { error } = schema.validate({ value: enteredInput });\r\n    if (error) {\r\n      errorMsg = error.toString();\r\n      inputIsValid = false;\r\n    }\r\n  }\r\n\r\n  const hasError = !inputIsValid && isTouched;\r\n  const inputChangeHandler = (e) => {\r\n    setEnteredInput(e.target.value);\r\n  };\r\n  const inputBlurHandler = () => {\r\n    setIsTouched(true);\r\n  };\r\n  const inputReset = () => {\r\n    setIsTouched(false);\r\n    setEnteredInput('');\r\n  };\r\n\r\n  useEffect(() => {\r\n    setEnteredInput(initialState);\r\n  }, [initialState]);\r\n\r\n  return {\r\n    enteredInput,\r\n    inputIsValid,\r\n    hasError,\r\n    inputChangeHandler,\r\n    inputBlurHandler,\r\n    inputReset,\r\n    setEnteredInput,\r\n    errorMsg,\r\n    isTouched,\r\n  };\r\n};\r\n","import { Button, CircularProgress, makeStyles } from '@material-ui/core';\r\nimport React from 'react';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'block',\r\n    '&.Mui-disabled': {\r\n      background: '#ddd',\r\n      cursort: 'not-allowed',\r\n    },\r\n  },\r\n  buttonLoading: {\r\n    opacity: ' 0.7 !important',\r\n    minHeight: 42,\r\n  },\r\n}));\r\n\r\nfunction ButtonLoading({ children, size, onClick, isLoading, ...props }) {\r\n  const classes = useStyles();\r\n  return (\r\n    <>\r\n      {isLoading && (\r\n        <Button\r\n          className={`${classes.root} ${classes.buttonLoading}`}\r\n          fullWidth\r\n          size={size}\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          startIcon={<CircularProgress size={22} style={{ color: '#fff' }} />}\r\n        />\r\n      )}\r\n      {!isLoading && (\r\n        <Button\r\n          className={classes.root}\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          fullWidth\r\n          size={size}\r\n          onClick={onClick}\r\n          {...props}>\r\n          {children}\r\n        </Button>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ButtonLoading;\r\n","const Joi = require('joi');\r\nconst passwordschema = {\r\n  value: Joi.string().min(8).required().messages({\r\n    'string.base': `Password should be a type of 'text'`,\r\n    'string.empty': `Password cannot be an empty field`,\r\n    'any.required': `Password is a required field`,\r\n    'string.min': 'Password must be longer than or equal to 8 characters',\r\n  }),\r\n};\r\n\r\nconst confirmpasswordSchema = {\r\n  value: Joi.string().required().messages({\r\n    'string.empty': `Retype password cannot be an empty field`,\r\n  }),\r\n};\r\n\r\nexport { passwordschema, confirmpasswordSchema };\r\n","const Joi = require('joi');\r\nconst usernameSchema = {\r\n  value: Joi.string().min(3).max(32).required().messages({\r\n    'string.base': `Username should be a type of 'text' or email`,\r\n    'string.empty': `Username cannot be an empty field`,\r\n    'string.min': `Username should have a minimum length of {#limit}`,\r\n    'string.max': `Username should have a maximum length of {#limit}`,\r\n    'any.required': `Username is a required field`,\r\n  }),\r\n};\r\n\r\nconst emailSchema = {\r\n  value: Joi.string()\r\n    .max(320)\r\n    .email({ tlds: { allow: false } })\r\n    .required()\r\n    .messages({\r\n      'string.empty': `Email cannot be an empty field`,\r\n      'string.max': `Email should have a maximum length of {#limit}`,\r\n      'any.required': `Email is a required field`,\r\n    }),\r\n};\r\n\r\nexport { usernameSchema, emailSchema };\r\n","const Joi = require('joi');\r\nconst recoveryCodeSchema = {\r\n  value: Joi.string().required().messages({\r\n    'string.empty': `\"recoveryCode\" cannot be an empty field`,\r\n    'any.required': `\"recoveryCode\" is a required field`,\r\n  }),\r\n};\r\n\r\nconst verifyCodeSchema = {\r\n  value: Joi.string().required().messages({\r\n    'string.empty': `\"recoveryCode\" cannot be an empty field`,\r\n    'any.required': `\"recoveryCode\" is a required field`,\r\n  }),\r\n};\r\n\r\nexport { recoveryCodeSchema, verifyCodeSchema };\r\n","import * as React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z\"\n}), 'Visibility');","import * as React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M12 7c2.76 0 5 2.24 5 5 0 .65-.13 1.26-.36 1.83l2.92 2.92c1.51-1.26 2.7-2.89 3.43-4.75-1.73-4.39-6-7.5-11-7.5-1.4 0-2.74.25-3.98.7l2.16 2.16C10.74 7.13 11.35 7 12 7zM2 4.27l2.28 2.28.46.46C3.08 8.3 1.78 10.02 1 12c1.73 4.39 6 7.5 11 7.5 1.55 0 3.03-.3 4.38-.84l.42.42L19.73 22 21 20.73 3.27 3 2 4.27zM7.53 9.8l1.55 1.55c-.05.21-.08.43-.08.65 0 1.66 1.34 3 3 3 .22 0 .44-.03.65-.08l1.55 1.55c-.67.33-1.41.53-2.2.53-2.76 0-5-2.24-5-5 0-.79.2-1.53.53-2.2zm4.31-.78l3.15 3.15.02-.16c0-1.66-1.34-3-3-3l-.17.01z\"\n}), 'VisibilityOff');","import { alpha, makeStyles } from '@material-ui/core';\r\n\r\nexport default makeStyles((theme) => ({\r\n  root: {\r\n    minHeight: '100vh',\r\n    background: \"url('/images/background.jpg') no-repeat center/cover\",\r\n    backgroundAttachment: 'fixed',\r\n    paddingTop: '20vh',\r\n    paddingBottom: '20vh',\r\n    position: 'relative',\r\n    zIndex: 1,\r\n    '&::before': {\r\n      content: \"''\",\r\n      position: 'absolute',\r\n      left: 0,\r\n      top: 0,\r\n      width: '100%',\r\n      height: '100%',\r\n      background: alpha('#000', 0.7),\r\n      zIndex: -1,\r\n    },\r\n  },\r\n  form: {\r\n    width: '27rem',\r\n    maxWidth: 'calc(100% - 20px)',\r\n    margin: '0 auto 0',\r\n    padding: theme.spacing(5, 7),\r\n    borderRadius: 10,\r\n    background: alpha('#000', 0.7),\r\n    [theme.breakpoints.down('xs')]: {\r\n      padding: theme.spacing(3, 2),\r\n    },\r\n  },\r\n  title: {\r\n    marginBottom: theme.spacing(3),\r\n    textAlign: 'center',\r\n    color: '#fff',\r\n  },\r\n  formControl: {\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  textField: {\r\n    background: '#ddd',\r\n    borderRadius: theme.shape.borderRadius,\r\n    '& .MuiFilledInput-underline:after': {\r\n      display: 'none',\r\n    },\r\n  },\r\n\r\n  inputLabel: {\r\n    fontSize: 13,\r\n    '&.Mui-focused': {\r\n      color: '#000',\r\n    },\r\n    '&.Mui-error': {\r\n      color: 'red',\r\n    },\r\n  },\r\n  textHelper: {\r\n    marginTop: theme.spacing(1),\r\n    color: '#fff',\r\n    '& > a': {\r\n      color: theme.palette.primary.main,\r\n      textDecoration: 'underline',\r\n    },\r\n    '&:not(:last-child)': {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n  },\r\n\r\n  errorMessage: {\r\n    fontSize: 11,\r\n    color: 'red',\r\n    fontWeight: 'normal',\r\n  },\r\n  datePicker: {\r\n    '& .MuiInputBase-adornedEnd': {\r\n      marginRight: -12,\r\n    },\r\n  },\r\n  resError: {\r\n    fontSize: 11,\r\n    color: 'red',\r\n    fontWeight: 'normal',\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n}));\r\n","import React, { useState } from 'react';\r\nimport {\r\n  Typography,\r\n  FormControl,\r\n  FilledInput,\r\n  InputLabel,\r\n  InputAdornment,\r\n  IconButton,\r\n  Box,\r\n  FormHelperText,\r\n} from '@material-ui/core';\r\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers';\r\nimport useStyles from './RegisterStyle';\r\nimport { Visibility, VisibilityOff } from '@material-ui/icons';\r\nimport { Link, useHistory, Redirect, useLocation } from 'react-router-dom';\r\nimport { useInput } from '../../hooks/user-input';\r\nimport { passwordschema, usernameSchema, emailSchema, confirmpasswordSchema } from '../../schemas';\r\nimport ButtonLoading from '../../components/UI/ButtonLoading/ButtonLoading';\r\nimport MomentUtils from '@date-io/moment';\r\nimport { useDispatch } from 'react-redux';\r\nimport { register } from '../../slices/auth.slice';\r\nimport { useSelector } from 'react-redux';\r\nimport moment from 'moment';\r\nfunction Register() {\r\n  const classes = useStyles();\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [showRetypePassword, setShowRetypePassword] = useState(false);\r\n  const isLoading = useSelector((state) => state.auth.isLoading);\r\n  const isAuthenticated = useSelector((state) => state.auth.isAuthenticated);\r\n  const [birthDate, setBirthDate] = useState(new Date());\r\n  const [birthError, setBirthError] = useState(null);\r\n  const [isNotMatch, setIsNotMatch] = useState(true);\r\n\r\n  const [error, setError] = useState(null);\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n\r\n  // const today = new Date(new Date().toISOString().slice(0, 10));\r\n  // const minDate = today.setFullYear(today.getFullYear() + 5);\r\n  // const maxDate = today.setFullYear(today.getFullYear() + 150);\r\n\r\n  const dispatch = useDispatch();\r\n  const handleDateChange = (date) => {\r\n    setBirthError(null);\r\n    // const selectedDate = new Date(date);\r\n\r\n    // if (selectedDate.getTime() > maxDate) {\r\n    //   setBirthError('ValidationError: Birth should not be after maximal date');\r\n    //   return;\r\n    // }\r\n    // if (selectedDate.getTime() < minDate) {\r\n    //   setBirthError('ValidationError: Birth should not be before minimal date');\r\n    //   return;\r\n    // }\r\n    setBirthDate(date);\r\n  };\r\n\r\n  const {\r\n    enteredInput: username,\r\n    inputBlurHandler: usernameBlurHandler,\r\n    inputChangeHandler: usernameChangeHandler,\r\n    inputReset: usernameReset,\r\n    inputIsValid: usernameIsvalid,\r\n    hasError: usernameHasError,\r\n    errorMsg: usernameErrorMessage,\r\n  } = useInput(usernameSchema);\r\n\r\n  const {\r\n    enteredInput: email,\r\n    inputBlurHandler: emailBlurHandler,\r\n    inputChangeHandler: emailChangeHandler,\r\n    inputReset: emailReset,\r\n    inputIsValid: emailIsvalid,\r\n    hasError: emailHasError,\r\n    errorMsg: emailErrorMessage,\r\n  } = useInput(emailSchema);\r\n  const {\r\n    enteredInput: password,\r\n    inputBlurHandler: passwordBlurHandler,\r\n    inputChangeHandler: passwordChangeHandler,\r\n    inputReset: passwordReset,\r\n    inputIsValid: passwordIsvalid,\r\n    hasError: passwordHasError,\r\n    errorMsg: passwordErrorMessage,\r\n  } = useInput(passwordschema);\r\n\r\n  const {\r\n    enteredInput: confirmpassword,\r\n    inputBlurHandler: confirmpasswordBlurHandler,\r\n    inputChangeHandler: confirmpasswordChangeHandler,\r\n    inputReset: confirmpasswordReset,\r\n    inputIsValid: confirmpasswordIsvalid,\r\n    hasError: confirmpasswordHasError,\r\n    errorMsg: confirmpasswordErrorMessage,\r\n    isTouched,\r\n  } = useInput(confirmpasswordSchema);\r\n\r\n  const passwordOnChangeHandler = (e) => {\r\n    passwordChangeHandler(e);\r\n    if (e.target.value !== confirmpassword && isTouched) {\r\n      setIsNotMatch(true);\r\n    } else {\r\n      setIsNotMatch(false);\r\n    }\r\n  };\r\n  const confirmPasswordOnChangeHandler = (e) => {\r\n    confirmpasswordChangeHandler(e);\r\n    if (e.target.value !== password) {\r\n      setIsNotMatch(true);\r\n    } else {\r\n      setIsNotMatch(false);\r\n    }\r\n  };\r\n\r\n  const formIsValid =\r\n    usernameIsvalid &&\r\n    emailIsvalid &&\r\n    passwordIsvalid &&\r\n    confirmpasswordIsvalid &&\r\n    birthError === null;\r\n\r\n  const toggleShowPasswordHandler = () => {\r\n    setShowPassword((prevState) => !prevState);\r\n  };\r\n  const mouseDownPasswordHandler = (event) => {\r\n    event.preventDefault();\r\n  };\r\n  const toggleShowRetypePasswordHandler = () => {\r\n    setShowRetypePassword((prevState) => !prevState);\r\n  };\r\n  const mouseDownRetypePasswordHandler = (event) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  const formSubmitHandler = async (e) => {\r\n    e.preventDefault();\r\n    if (!formIsValid) {\r\n      return;\r\n    }\r\n    setError(null);\r\n    try {\r\n      await dispatch(\r\n        register({\r\n          email,\r\n          username,\r\n          password,\r\n          birthdate: moment(birthDate).format('yyyy-MM-DD'),\r\n        })\r\n      ).unwrap();\r\n      history.push('/confirm-email');\r\n      usernameReset();\r\n      emailReset();\r\n      passwordReset();\r\n      confirmpasswordReset();\r\n    } catch (error) {\r\n      setError(error);\r\n    }\r\n  };\r\n  if (isAuthenticated) {\r\n    return <Redirect to={location.state?.from || '/'} />;\r\n  }\r\n  return (\r\n    <div className={classes.root}>\r\n      <div>\r\n        <form className={classes.form} onSubmit={formSubmitHandler}>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            Register\r\n          </Typography>\r\n          <div className={classes.formControl}>\r\n            <FormControl\r\n              error={usernameHasError}\r\n              variant=\"filled\"\r\n              fullWidth\r\n              className={classes.textField}>\r\n              <InputLabel htmlFor=\"username\" className={classes.inputLabel}>\r\n                Username\r\n              </InputLabel>\r\n              <FilledInput\r\n                value={username}\r\n                onBlur={usernameBlurHandler}\r\n                onChange={usernameChangeHandler}\r\n                id=\"username\"\r\n                type=\"text\"\r\n              />\r\n            </FormControl>\r\n            {usernameHasError && (\r\n              <FormHelperText className={classes.errorMessage}>\r\n                {usernameErrorMessage}\r\n              </FormHelperText>\r\n            )}\r\n          </div>\r\n\r\n          <div className={classes.formControl}>\r\n            <FormControl\r\n              error={emailHasError}\r\n              variant=\"filled\"\r\n              fullWidth\r\n              className={classes.textField}>\r\n              <InputLabel htmlFor=\"email\" className={classes.inputLabel}>\r\n                Email\r\n              </InputLabel>\r\n              <FilledInput\r\n                value={email}\r\n                onBlur={emailBlurHandler}\r\n                onChange={emailChangeHandler}\r\n                id=\"email\"\r\n                type=\"text\"\r\n              />\r\n            </FormControl>\r\n            {emailHasError && (\r\n              <FormHelperText className={classes.errorMessage}>{emailErrorMessage}</FormHelperText>\r\n            )}\r\n          </div>\r\n\r\n          <div className={classes.formControl}>\r\n            <MuiPickersUtilsProvider utils={MomentUtils}>\r\n              <FormControl\r\n                error={passwordHasError}\r\n                variant=\"filled\"\r\n                fullWidth\r\n                className={classes.textField}>\r\n                <KeyboardDatePicker\r\n                  className={classes.datePicker}\r\n                  label=\"Birth day\"\r\n                  format=\"MM/DD/yyyy\"\r\n                  // minDate={minDate}\r\n                  maxDate={new Date()}\r\n                  value={birthDate}\r\n                  onChange={handleDateChange}\r\n                  error={false}\r\n                  helperText={null}\r\n                  autoOk\r\n                  variant=\"inline\"\r\n                  inputVariant=\"filled\"\r\n                  KeyboardButtonProps={{\r\n                    'aria-label': 'change date',\r\n                  }}\r\n                />\r\n              </FormControl>\r\n            </MuiPickersUtilsProvider>\r\n\r\n            {birthError && (\r\n              <FormHelperText className={classes.errorMessage}>{birthError}</FormHelperText>\r\n            )}\r\n          </div>\r\n          <div className={classes.formControl}>\r\n            <FormControl\r\n              error={passwordHasError}\r\n              className={classes.textField}\r\n              variant=\"filled\"\r\n              fullWidth>\r\n              <InputLabel htmlFor=\"password\" className={classes.inputLabel}>\r\n                Password\r\n              </InputLabel>\r\n              <FilledInput\r\n                value={password}\r\n                onBlur={passwordBlurHandler}\r\n                onChange={passwordOnChangeHandler}\r\n                id=\"password\"\r\n                type={showPassword ? 'text' : 'password'}\r\n                className={classes.inputField}\r\n                endAdornment={\r\n                  <InputAdornment position=\"end\">\r\n                    <IconButton\r\n                      aria-label=\"toggle password visibility\"\r\n                      edge=\"end\"\r\n                      onClick={toggleShowPasswordHandler}\r\n                      onMouseDown={mouseDownPasswordHandler}>\r\n                      {showPassword ? <Visibility /> : <VisibilityOff />}\r\n                    </IconButton>\r\n                  </InputAdornment>\r\n                }\r\n              />\r\n            </FormControl>\r\n\r\n            {passwordHasError && (\r\n              <FormHelperText className={classes.errorMessage}>\r\n                {passwordErrorMessage}\r\n              </FormHelperText>\r\n            )}\r\n          </div>\r\n\r\n          <div className={classes.formControl}>\r\n            <FormControl\r\n              error={confirmpasswordHasError}\r\n              className={classes.textField}\r\n              variant=\"filled\"\r\n              fullWidth>\r\n              <InputLabel htmlFor=\"confirmpassword\" className={classes.inputLabel}>\r\n                Retype password\r\n              </InputLabel>\r\n              <FilledInput\r\n                value={confirmpassword}\r\n                onBlur={confirmpasswordBlurHandler}\r\n                onChange={confirmPasswordOnChangeHandler}\r\n                id=\"retype-password\"\r\n                type={showRetypePassword ? 'text' : 'password'}\r\n                className={classes.inputField}\r\n                endAdornment={\r\n                  <InputAdornment position=\"end\">\r\n                    <IconButton\r\n                      aria-label=\"toggle password visibility\"\r\n                      edge=\"end\"\r\n                      onClick={toggleShowRetypePasswordHandler}\r\n                      onMouseDown={mouseDownRetypePasswordHandler}>\r\n                      {showRetypePassword ? <Visibility /> : <VisibilityOff />}\r\n                    </IconButton>\r\n                  </InputAdornment>\r\n                }\r\n              />\r\n            </FormControl>\r\n\r\n            {confirmpasswordHasError && (\r\n              <FormHelperText className={classes.errorMessage}>\r\n                {confirmpasswordErrorMessage}\r\n              </FormHelperText>\r\n            )}\r\n            {isNotMatch && isTouched && !confirmpasswordHasError && (\r\n              <FormHelperText className={classes.errorMessage}>\r\n                <>ValidationError: Retype password does not match password</>\r\n              </FormHelperText>\r\n            )}\r\n          </div>\r\n          {error && <FormHelperText className={classes.resError}>{error}</FormHelperText>}\r\n          <ButtonLoading size=\"large\" isLoading={isLoading} type=\"submit\" disabled={!formIsValid}>\r\n            Register\r\n          </ButtonLoading>\r\n\r\n          <Box display=\"flex\" justifyContent=\"flex-end\">\r\n            <Typography variant=\"body2\" className={classes.textHelper}>\r\n              <Link to=\"/login\">Already have an account?</Link>\r\n            </Typography>\r\n          </Box>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Register;\r\n"],"sourceRoot":""}