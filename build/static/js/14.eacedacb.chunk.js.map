{"version":3,"sources":["hooks/user-input.js","components/UI/ButtonLoading/ButtonLoading.jsx","schemas/password.chema.js","schemas/user.chema.js","schemas/code.chema.js","pages/ForgotPassword/ForgotPassword.styles.jsx","pages/ForgotPassword/ForgotPassword.jsx"],"names":["Joi","require","useInput","schemaJson","initialState","useState","enteredInput","setEnteredInput","isTouched","setIsTouched","inputIsValid","errorMsg","schema","object","validate","value","error","toString","hasError","inputChangeHandler","e","target","inputBlurHandler","inputReset","useEffect","useStyles","makeStyles","theme","root","display","background","cursort","buttonLoading","opacity","minHeight","ButtonLoading","children","size","onClick","isLoading","props","classes","className","fullWidth","variant","color","startIcon","style","passwordschema","string","min","required","messages","confirmpasswordSchema","usernameSchema","max","emailSchema","email","tlds","allow","verifyCodeSchema","backgroundAttachment","paddingTop","paddingBottom","position","zIndex","content","left","top","width","height","alpha","form","maxWidth","margin","padding","spacing","borderRadius","breakpoints","down","title","marginBottom","textAlign","formControl","textField","shape","inputLabel","fontSize","textHelper","marginTop","palette","primary","main","textDecoration","marginRight","errorMessage","fontWeight","ForgotPassword","useSelector","state","auth","dispatch","useDispatch","emailBlurHandler","emailChangeHandler","emailReset","emailIsvalid","emailHasError","emailErrorMessage","formIsValid","formSubmitHandler","a","preventDefault","forgotPassword","unwrap","toast","success","onSubmit","Typography","FormControl","InputLabel","htmlFor","FilledInput","onBlur","onChange","id","type","FormHelperText","disabled"],"mappings":"wKACMA,EAAMC,EAAQ,KAEPC,EAAW,WAA2C,IAA1CC,EAAyC,uDAA5B,KAAMC,EAAsB,uDAAP,GACzD,EAAwCC,mBAASD,GAAjD,mBAAOE,EAAP,KAAqBC,EAArB,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACIC,GAAe,EAEfC,EAAW,KACf,GAAIR,EAAY,CACd,IAAMS,EAASZ,EAAIa,OAAOV,GAC1B,EAAkBS,EAAOE,SAAS,CAAEC,MAAOT,IAAnCU,EAAR,EAAQA,MACJA,IACFL,EAAWK,EAAMC,WACjBP,GAAe,GAInB,IAAMQ,GAAYR,GAAgBF,EAC5BW,EAAqB,SAACC,GAC1Bb,EAAgBa,EAAEC,OAAON,QAErBO,EAAmB,WACvBb,GAAa,IAETc,EAAa,WACjBd,GAAa,GACbF,EAAgB,KAOlB,OAJAiB,qBAAU,WACRjB,EAAgBH,KACf,CAACA,IAEG,CACLE,eACAI,eACAQ,WACAC,qBACAG,mBACAC,aACAhB,kBACAI,WACAH,e,2ICxCEiB,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,QAAS,QACT,iBAAkB,CAChBC,WAAY,OACZC,QAAS,gBAGbC,cAAe,CACbC,QAAS,kBACTC,UAAW,QAkCAC,IA9Bf,YAA0E,IAAjDC,EAAgD,EAAhDA,SAAUC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,UAAcC,EAAS,iBACjEC,EAAUhB,IAChB,OACE,qCACGc,GACC,cAAC,IAAD,CACEG,UAAS,UAAKD,EAAQb,KAAb,YAAqBa,EAAQT,eACtCW,WAAS,EACTN,KAAMA,EACNO,QAAQ,YACRC,MAAM,UACNC,UAAW,cAAC,IAAD,CAAkBT,KAAM,GAAIU,MAAO,CAAEF,MAAO,aAGzDN,GACA,cAAC,IAAD,yBACEG,UAAWD,EAAQb,KACnBgB,QAAQ,YACRC,MAAM,UACNF,WAAS,EACTN,KAAMA,EACNC,QAASA,GACLE,GAPN,aAQGJ,U,2MCxCX,IAAMpC,EAAMC,EAAQ,KACd+C,EAAiB,CACrBjC,MAAOf,EAAIiD,SAASC,IAAI,GAAGC,WAAWC,SAAS,CAC7C,cAAc,sCACd,eAAe,oCACf,eAAe,+BACf,aAAc,2DAIZC,EAAwB,CAC5BtC,MAAOf,EAAIiD,SAASE,WAAWC,SAAS,CACtC,eAAe,8CCZbpD,EAAMC,EAAQ,KACdqD,EAAiB,CACrBvC,MAAOf,EAAIiD,SAASC,IAAI,GAAGK,IAAI,IAAIJ,WAAWC,SAAS,CACrD,cAAc,+CACd,eAAe,oCACf,aAAa,oDACb,aAAa,oDACb,eAAe,kCAIbI,EAAc,CAClBzC,MAAOf,EAAIiD,SACRM,IAAI,KACJE,MAAM,CAAEC,KAAM,CAAEC,OAAO,KACvBR,WACAC,SAAS,CACR,eAAe,iCACf,aAAa,iDACb,eAAe,+BCnBfpD,EAAMC,EAAQ,KAQd2D,GANG5D,EAAIiD,SAASE,WAAWC,SAAS,CACtC,eAAe,0CACf,eAAe,uCAIM,CACvBrC,MAAOf,EAAIiD,SAASE,WAAWC,SAAS,CACtC,eAAe,0CACf,eAAe,0C,gJCTJ1B,eAAW,SAACC,GAAD,MAAY,CACpCC,KAAM,CACJM,UAAW,QACXJ,WAAY,uDACZ+B,qBAAsB,QACtBC,WAAY,OACZC,cAAe,OACfC,SAAU,WACVC,OAAQ,EACR,YAAa,CACXC,QAAS,KACTF,SAAU,WACVG,KAAM,EACNC,IAAK,EACLC,MAAO,OACPC,OAAQ,OACRxC,WAAYyC,YAAM,OAAQ,IAC1BN,QAAS,IAGbO,KAAK,aACHH,MAAO,QACPI,SAAU,oBACVC,OAAQ,WACRC,QAAShD,EAAMiD,QAAQ,EAAG,GAC1BC,aAAc,GACd/C,WAAYyC,YAAM,OAAQ,KACzB5C,EAAMmD,YAAYC,KAAK,MAAQ,CAC9BJ,QAAShD,EAAMiD,QAAQ,EAAG,KAG9BI,MAAO,CACLC,aAActD,EAAMiD,QAAQ,GAC5BM,UAAW,SACXrC,MAAO,QAETsC,YAAa,CACXF,aAActD,EAAMiD,QAAQ,IAE9BQ,UAAW,CACTtD,WAAY,OACZ+C,aAAclD,EAAM0D,MAAMR,aAC1B,oCAAqC,CACnChD,QAAS,SAIbyD,WAAY,CACVC,SAAU,GACV,gBAAiB,CACf1C,MAAO,QAET,cAAe,CACbA,MAAO,QAGX2C,WAAY,CACVC,UAAW9D,EAAMiD,QAAQ,GACzB/B,MAAO,OACP,QAAS,CACPA,MAAOlB,EAAM+D,QAAQC,QAAQC,KAC7BC,eAAgB,aAElB,qBAAsB,CACpBC,YAAanE,EAAMiD,QAAQ,KAI/BmB,aAAc,CACZR,SAAU,GACV1C,MAAO,MACPmD,WAAY,c,0DCgBDC,UAxEf,WACE,IAAMxD,EAAUhB,IACVc,EAAY2D,aAAY,SAACC,GAAD,OAAWA,EAAMC,KAAK7D,aAC9C8D,EAAWC,cAEjB,EAQIpG,YAASsD,KAPGC,EADhB,EACEnD,aACkBiG,EAFpB,EAEEjF,iBACoBkF,EAHtB,EAGErF,mBACYsF,EAJd,EAIElF,WACcmF,EALhB,EAKEhG,aACUiG,EANZ,EAMEzF,SACU0F,EAPZ,EAOEjG,SAGIkG,EAAcH,EAEdI,EAAiB,uCAAG,WAAO1F,GAAP,SAAA2F,EAAA,yDACxB3F,EAAE4F,iBACGH,EAFmB,0EAMhBR,EACJY,YAAe,CACbxD,WAEFyD,SAVoB,OAWtBT,IACAU,IAAMC,QAAQ,6CAZQ,kDActBD,IAAMnG,MAAN,MAdsB,0DAAH,sDAiBvB,OACE,qBAAK0B,UAAWD,EAAQb,KAAxB,SACE,8BACE,uBAAMc,UAAWD,EAAQ+B,KAAM6C,SAAUP,EAAzC,UACE,cAACQ,EAAA,EAAD,CAAY1E,QAAQ,KAAKF,UAAWD,EAAQuC,MAA5C,6BAGA,sBAAKtC,UAAWD,EAAQ0C,YAAxB,UACE,eAACoC,EAAA,EAAD,CACEvG,MAAO2F,EACP/D,QAAQ,SACRD,WAAS,EACTD,UAAWD,EAAQ2C,UAJrB,UAKE,cAACoC,EAAA,EAAD,CAAYC,QAAQ,QAAQ/E,UAAWD,EAAQ6C,WAA/C,mBAGA,cAACoC,EAAA,EAAD,CACE3G,MAAO0C,EACPkE,OAAQpB,EACRqB,SAAUpB,EACVqB,GAAG,QACHC,KAAK,YAGRnB,GACC,cAACoB,EAAA,EAAD,CAAgBrF,UAAWD,EAAQsD,aAAnC,SAAkDa,OAItD,cAACzE,EAAA,EAAD,CAAeE,KAAK,QAAQE,UAAWA,EAAWuF,KAAK,SAASE,UAAWnB,EAA3E","file":"static/js/14.eacedacb.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\r\nconst Joi = require('joi');\r\n\r\nexport const useInput = (schemaJson = null, initialState = '') => {\r\n  const [enteredInput, setEnteredInput] = useState(initialState);\r\n  const [isTouched, setIsTouched] = useState(false);\r\n  let inputIsValid = true;\r\n\r\n  let errorMsg = null;\r\n  if (schemaJson) {\r\n    const schema = Joi.object(schemaJson);\r\n    const { error } = schema.validate({ value: enteredInput });\r\n    if (error) {\r\n      errorMsg = error.toString();\r\n      inputIsValid = false;\r\n    }\r\n  }\r\n\r\n  const hasError = !inputIsValid && isTouched;\r\n  const inputChangeHandler = (e) => {\r\n    setEnteredInput(e.target.value);\r\n  };\r\n  const inputBlurHandler = () => {\r\n    setIsTouched(true);\r\n  };\r\n  const inputReset = () => {\r\n    setIsTouched(false);\r\n    setEnteredInput('');\r\n  };\r\n\r\n  useEffect(() => {\r\n    setEnteredInput(initialState);\r\n  }, [initialState]);\r\n\r\n  return {\r\n    enteredInput,\r\n    inputIsValid,\r\n    hasError,\r\n    inputChangeHandler,\r\n    inputBlurHandler,\r\n    inputReset,\r\n    setEnteredInput,\r\n    errorMsg,\r\n    isTouched,\r\n  };\r\n};\r\n","import { Button, CircularProgress, makeStyles } from '@material-ui/core';\r\nimport React from 'react';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'block',\r\n    '&.Mui-disabled': {\r\n      background: '#ddd',\r\n      cursort: 'not-allowed',\r\n    },\r\n  },\r\n  buttonLoading: {\r\n    opacity: ' 0.7 !important',\r\n    minHeight: 42,\r\n  },\r\n}));\r\n\r\nfunction ButtonLoading({ children, size, onClick, isLoading, ...props }) {\r\n  const classes = useStyles();\r\n  return (\r\n    <>\r\n      {isLoading && (\r\n        <Button\r\n          className={`${classes.root} ${classes.buttonLoading}`}\r\n          fullWidth\r\n          size={size}\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          startIcon={<CircularProgress size={22} style={{ color: '#fff' }} />}\r\n        />\r\n      )}\r\n      {!isLoading && (\r\n        <Button\r\n          className={classes.root}\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          fullWidth\r\n          size={size}\r\n          onClick={onClick}\r\n          {...props}>\r\n          {children}\r\n        </Button>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ButtonLoading;\r\n","const Joi = require('joi');\r\nconst passwordschema = {\r\n  value: Joi.string().min(8).required().messages({\r\n    'string.base': `Password should be a type of 'text'`,\r\n    'string.empty': `Password cannot be an empty field`,\r\n    'any.required': `Password is a required field`,\r\n    'string.min': 'Password must be longer than or equal to 8 characters',\r\n  }),\r\n};\r\n\r\nconst confirmpasswordSchema = {\r\n  value: Joi.string().required().messages({\r\n    'string.empty': `Retype password cannot be an empty field`,\r\n  }),\r\n};\r\n\r\nexport { passwordschema, confirmpasswordSchema };\r\n","const Joi = require('joi');\r\nconst usernameSchema = {\r\n  value: Joi.string().min(3).max(32).required().messages({\r\n    'string.base': `Username should be a type of 'text' or email`,\r\n    'string.empty': `Username cannot be an empty field`,\r\n    'string.min': `Username should have a minimum length of {#limit}`,\r\n    'string.max': `Username should have a maximum length of {#limit}`,\r\n    'any.required': `Username is a required field`,\r\n  }),\r\n};\r\n\r\nconst emailSchema = {\r\n  value: Joi.string()\r\n    .max(320)\r\n    .email({ tlds: { allow: false } })\r\n    .required()\r\n    .messages({\r\n      'string.empty': `Email cannot be an empty field`,\r\n      'string.max': `Email should have a maximum length of {#limit}`,\r\n      'any.required': `Email is a required field`,\r\n    }),\r\n};\r\n\r\nexport { usernameSchema, emailSchema };\r\n","const Joi = require('joi');\r\nconst recoveryCodeSchema = {\r\n  value: Joi.string().required().messages({\r\n    'string.empty': `\"recoveryCode\" cannot be an empty field`,\r\n    'any.required': `\"recoveryCode\" is a required field`,\r\n  }),\r\n};\r\n\r\nconst verifyCodeSchema = {\r\n  value: Joi.string().required().messages({\r\n    'string.empty': `\"recoveryCode\" cannot be an empty field`,\r\n    'any.required': `\"recoveryCode\" is a required field`,\r\n  }),\r\n};\r\n\r\nexport { recoveryCodeSchema, verifyCodeSchema };\r\n","import { alpha, makeStyles } from '@material-ui/core';\r\n\r\nexport default makeStyles((theme) => ({\r\n  root: {\r\n    minHeight: '100vh',\r\n    background: \"url('/images/background.jpg') no-repeat center/cover\",\r\n    backgroundAttachment: 'fixed',\r\n    paddingTop: '20vh',\r\n    paddingBottom: '20vh',\r\n    position: 'relative',\r\n    zIndex: 1,\r\n    '&::before': {\r\n      content: \"''\",\r\n      position: 'absolute',\r\n      left: 0,\r\n      top: 0,\r\n      width: '100%',\r\n      height: '100%',\r\n      background: alpha('#000', 0.7),\r\n      zIndex: -1,\r\n    },\r\n  },\r\n  form: {\r\n    width: '27rem',\r\n    maxWidth: 'calc(100% - 20px)',\r\n    margin: '0 auto 0',\r\n    padding: theme.spacing(5, 7),\r\n    borderRadius: 10,\r\n    background: alpha('#000', 0.7),\r\n    [theme.breakpoints.down('xs')]: {\r\n      padding: theme.spacing(3, 2),\r\n    },\r\n  },\r\n  title: {\r\n    marginBottom: theme.spacing(3),\r\n    textAlign: 'center',\r\n    color: '#fff',\r\n  },\r\n  formControl: {\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  textField: {\r\n    background: '#ddd',\r\n    borderRadius: theme.shape.borderRadius,\r\n    '& .MuiFilledInput-underline:after': {\r\n      display: 'none',\r\n    },\r\n  },\r\n\r\n  inputLabel: {\r\n    fontSize: 13,\r\n    '&.Mui-focused': {\r\n      color: '#000',\r\n    },\r\n    '&.Mui-error': {\r\n      color: 'red',\r\n    },\r\n  },\r\n  textHelper: {\r\n    marginTop: theme.spacing(1),\r\n    color: '#fff',\r\n    '& > a': {\r\n      color: theme.palette.primary.main,\r\n      textDecoration: 'underline',\r\n    },\r\n    '&:not(:last-child)': {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n  },\r\n\r\n  errorMessage: {\r\n    fontSize: 11,\r\n    color: 'red',\r\n    fontWeight: 'normal',\r\n  },\r\n}));\r\n","import React from 'react';\r\nimport {\r\n  Typography,\r\n  FormControl,\r\n  FilledInput,\r\n  InputLabel,\r\n  FormHelperText,\r\n} from '@material-ui/core';\r\n\r\nimport useStyles from './ForgotPassword.styles';\r\nimport { useInput } from '../../hooks/user-input';\r\nimport { emailSchema } from '../../schemas';\r\nimport ButtonLoading from '../../components/UI/ButtonLoading/ButtonLoading';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { toast } from 'react-toastify';\r\nimport { forgotPassword } from '../../slices/auth.slice';\r\n\r\nfunction ForgotPassword() {\r\n  const classes = useStyles();\r\n  const isLoading = useSelector((state) => state.auth.isLoading);\r\n  const dispatch = useDispatch();\r\n\r\n  const {\r\n    enteredInput: email,\r\n    inputBlurHandler: emailBlurHandler,\r\n    inputChangeHandler: emailChangeHandler,\r\n    inputReset: emailReset,\r\n    inputIsValid: emailIsvalid,\r\n    hasError: emailHasError,\r\n    errorMsg: emailErrorMessage,\r\n  } = useInput(emailSchema);\r\n\r\n  const formIsValid = emailIsvalid;\r\n\r\n  const formSubmitHandler = async (e) => {\r\n    e.preventDefault();\r\n    if (!formIsValid) {\r\n      return;\r\n    }\r\n    try {\r\n      await dispatch(\r\n        forgotPassword({\r\n          email,\r\n        })\r\n      ).unwrap();\r\n      emailReset();\r\n      toast.success('Please check your email to reset password');\r\n    } catch (error) {\r\n      toast.error(error);\r\n    }\r\n  };\r\n  return (\r\n    <div className={classes.root}>\r\n      <div>\r\n        <form className={classes.form} onSubmit={formSubmitHandler}>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            Forgot Password\r\n          </Typography>\r\n          <div className={classes.formControl}>\r\n            <FormControl\r\n              error={emailHasError}\r\n              variant=\"filled\"\r\n              fullWidth\r\n              className={classes.textField}>\r\n              <InputLabel htmlFor=\"email\" className={classes.inputLabel}>\r\n                Email\r\n              </InputLabel>\r\n              <FilledInput\r\n                value={email}\r\n                onBlur={emailBlurHandler}\r\n                onChange={emailChangeHandler}\r\n                id=\"email\"\r\n                type=\"text\"\r\n              />\r\n            </FormControl>\r\n            {emailHasError && (\r\n              <FormHelperText className={classes.errorMessage}>{emailErrorMessage}</FormHelperText>\r\n            )}\r\n          </div>\r\n\r\n          <ButtonLoading size=\"large\" isLoading={isLoading} type=\"submit\" disabled={!formIsValid}>\r\n            Send\r\n          </ButtonLoading>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ForgotPassword;\r\n"],"sourceRoot":""}